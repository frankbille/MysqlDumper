package dk.frankbille.mysqldumper.ui;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import dk.frankbille.mysqldumper.ConnectionConfiguration;

import javax.swing.*;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import java.awt.event.*;

public class ConnectionConfigurationWindow extends JDialog {
    private JPanel contentPane;
    private JButton closeButton;
    private JTextField hostField;
    private JTextField databaseField;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JTextField nameField;
    private JTextField portField;

    public ConnectionConfigurationWindow(ConnectionConfiguration connectionConfiguration) {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(closeButton);

        closeButton.addActionListener(e -> onOK());

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        final AbstractDocument document = (AbstractDocument) portField.getDocument();
        document.setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int off, String str, AttributeSet attr) throws BadLocationException {
                fb.insertString(off, str.replaceAll("\\D++", ""), attr);  // remove non-digits
            }

            @Override
            public void replace(FilterBypass fb, int off, int len, String str, AttributeSet attr) throws BadLocationException {
                fb.replace(off, len, str.replaceAll("\\D++", ""), attr);  // remove non-digits
            }
        });

        nameField.getDocument().addDocumentListener(new PersistedDocumentListener() {
            @Override
            protected void doSaveChanges(String name) {
                connectionConfiguration.setName(name);
            }
        });
        nameField.setText(connectionConfiguration.getName());

        hostField.getDocument().addDocumentListener(new PersistedDocumentListener() {
            @Override
            protected void doSaveChanges(String host) {
                connectionConfiguration.setHost(host);
                nameField.setText(connectionConfiguration.getName());
            }
        });
        hostField.setText(connectionConfiguration.getHost());

        portField.getDocument().addDocumentListener(new PersistedDocumentListener() {
            @Override
            protected void doSaveChanges(String portString) {
                int port;
                try {
                    port = Integer.parseInt(portString);
                } catch (NumberFormatException e) {
                    throw new RuntimeException(e);
                }
                connectionConfiguration.setPort(port);
                nameField.setText(connectionConfiguration.getName());
            }
        });
        portField.setText("" + connectionConfiguration.getPort());

        databaseField.getDocument().addDocumentListener(new PersistedDocumentListener() {
            @Override
            protected void doSaveChanges(String database) {
                connectionConfiguration.setDatabase(database);
                nameField.setText(connectionConfiguration.getName());
            }
        });
        databaseField.setText(connectionConfiguration.getDatabase());

        usernameField.getDocument().addDocumentListener(new PersistedDocumentListener() {
            @Override
            protected void doSaveChanges(String username) {
                connectionConfiguration.setUsername(username);
                nameField.setText(connectionConfiguration.getName());
            }
        });
        usernameField.setText(connectionConfiguration.getUsername());

        passwordField.getDocument().addDocumentListener(new PersistedDocumentListener() {
            @Override
            protected void doSaveChanges(String password) {
                connectionConfiguration.setPassword(password);
            }
        });
        passwordField.setText(connectionConfiguration.getPassword());
    }

    private void onOK() {
// add your code here
        dispose();
    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new FormLayout("fill:d:grow", "center:d:grow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        contentPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8), null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:grow"));
        CellConstraints cc = new CellConstraints();
        contentPane.add(panel1, cc.xy(1, 3));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:d:grow", "center:d:grow"));
        panel1.add(panel2, cc.xy(3, 1));
        closeButton = new JButton();
        closeButton.setText("Close");
        panel2.add(closeButton, cc.xy(1, 1));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:d:grow", "center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        contentPane.add(panel3, cc.xy(1, 1, CellConstraints.DEFAULT, CellConstraints.FILL));
        final JLabel label1 = new JLabel();
        label1.setText("Host:");
        panel3.add(label1, cc.xy(1, 3));
        hostField = new JTextField();
        panel3.add(hostField, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        label2.setText("Database:");
        panel3.add(label2, cc.xy(1, 7));
        databaseField = new JTextField();
        panel3.add(databaseField, cc.xy(3, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label3 = new JLabel();
        label3.setText("Username:");
        panel3.add(label3, cc.xy(1, 9));
        final JLabel label4 = new JLabel();
        label4.setText("Password:");
        panel3.add(label4, cc.xy(1, 11));
        final JLabel label5 = new JLabel();
        label5.setText("Port");
        panel3.add(label5, cc.xy(1, 5));
        usernameField = new JTextField();
        panel3.add(usernameField, cc.xy(3, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
        passwordField = new JPasswordField();
        panel3.add(passwordField, cc.xy(3, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
        portField = new JTextField();
        panel3.add(portField, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label6 = new JLabel();
        label6.setText("Name:");
        panel3.add(label6, cc.xy(1, 1));
        nameField = new JTextField();
        panel3.add(nameField, cc.xy(3, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
